<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>

<title>Langage</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head>
<body bgcolor="#ffffff" text="#000000">

<h1>Langage</h1>
<h2>Variables<a name="variables"></a></h2>
<p>Variables start by $ (like PHP).<br>
  If you put another $ ($$var) behin variable, you take variable designed by value 
  of $var. $var can containt name with or without $. $var=myvar lik $var="$myvar".<br>
  All variables are strings, integer (int) 64 bits (de -9223372036854775808..9223372036854775807) or 32 bits (int32) (to &#8211;2147483648..2147483647) 
  or float (3.6 x 10^&#8211;4951 .. 1.1 x 10^4932) convert in string in internal).</p>
<p>To set a variable, use set (set $mavar, mavaleur + 1) or $titi = 0<br>
  To delete a variable use unSet (unSet $mavariable, $var2...)<br>
  To know if variable existe use isSet (isSet $monresultat $mavariable)</p>
<p>You can use * operator in front of variable name (see Pointer for more information)<br>
  You can use hexadecimal notation 0x1234.<br>
  You can use octal notation 01234.</p>
<p>Variables are not interpreted in string. "$truc" give "$truc" and not value 
  of $truc</p>
<p>String support \n (line feed) \r (carriage return) \0 (nul value) \t (tabulation)</p>

<h2>Constantes<a name="constante"></a></h2>  
<p>Constantes start by # and cannot start by number.<br />
To define a constantes use define(). To know is constante is set use defined().<br />
3 constantes are predefined :<br /> 
<ul>
  <li>#_line : current line number</li>
  <li>#_version : SimpleWebScript version</li>
  <li>#_scriptname : current script name</li>
</ul>
<br />
true et false is constante without #.</p>

<h2>Loope while, repeat, for, break, continue<a name="boucle"></a></h2>
<h3>while</h3>
<p>while execute when condition are true do<br>
  while $a = true do<br>
  Instruction<br>
  endwhile ;</p>

  <h3>repeat</h3>

<p>repeat execute when condition are false<br>
  repeat<br>
  Instruction<br>
  until false ;</p>
<h3>for</h3>
<p>for $var = startvalue to endvalue step incrementvalue do<br>
  Instruction<br>
  endfor ;</p>
<h3>break</h3>

<p>Exit for, repeat, while</p>
<p>You can add a label befor loop to break specifically a loop :<br />
<pre>
label1 : for $i = 0 to 1 do
             while true do
                 break label1 ;
             endwhile ;
         endfor ;
</pre>
</p>

<h3>continue</h3>
<p>Continue for, repeat, while</p>
<p>You can add a label befor loop to continue specifically a loop :<br />
<pre>
label1 : for $i = 0 to 1 do
             while true do
                 continue label1 ;
             endwhile ;
         endfor ;
</pre>
</p>


<h2>switch<a name="switch"></a></h2>
<p>You can use switch commande :</p>
<p>switch $var do<br>
  case "value1", "value2" :<br>
  Instruction1<br>
  break<br>
  default :<br>
  Default instruction<br>
  endswitch ; </p>
<h2>Condition if/elseif/else<a name="condition"></a></h2>
<p>If are very simple. </p>
<p>if $a = 'c' and $a&lt;&gt;'g' or $a&gt;'t' xor $a&lt;='g' then<br>
  Instruction<br>
  elseif $a = 'ccc' then<br>
  Instruction <br>
  else<br>
  Instruction<br>
  endif ;</p>
<h2> Comments<a name="commentaire"></a></h2>
<p>Comment start by // and can be in line with instruction. Use /* */ for 
  multiline comments and can be in line with instruction.</p>
<h2>Include in xHTML page<a name="inclusion"></a></h2>
<p>To include SWS in xHTML page, just put you code between &lt;@ and @&gt;</p>
<p>&lt;html&gt;<br>
  &lt;body&gt;<br>
  &lt;@ echo 'hello world!' @&gt;<br>
  &lt;/body&gt;<br>
  &lt;/html&gt;</p>
<h2>Stop program exit or die<a name="exit"></a></h2>
<p>To stop program or function use exit. You can past a int32 value to operating system.<br />
   You can use die to exit a script. You can past a string to be show.</p>
<h2>Operators<a name="operators"></a></h2>
<p>Bellow list of operator, order by priority. Don"t forget, line code read
  left to right.</p>
<table border="0" cellpadding="0" cellspacing="0" width="0">
  <tbody><tr>
    <td>in</td>
    <td>"text" in ["string to compare 1", "string to 
      compare 2"]. Return position. 0 for first position. Else, return -1 
      value. </td>
  </tr>
  <tr>
    <td>~</td>
    <td>inverse all bit</td>
  </tr>
  <tr>
    <td>^</td>
    <td>power</td>
  </tr>
  <tr>
    <td>*</td>
    <td>multiplication</td>
  </tr>
  <tr>
    <td>%</td>
    <td>modulo</td>
  </tr>
  <tr>
    <td>+</td>
    <td>addition or joint 2 strings</td>
  </tr>
  <tr>
    <td>-</td>
    <td>substraction</td>
  </tr>
  <tr>
    <td>&lt;&lt;</td>
    <td>shift bit left</td>
  </tr>
  <tr>
    <td>&gt;&gt;</td>
    <td>shift bit right</td>
  </tr>
  <tr>
    <td>bitand</td>
    <td>bit and</td>
  </tr>
  <tr>
    <td>bitxor</td>
    <td>bit xor</td>
  </tr>
  <tr>
    <td>bitor</td>
    <td>bit or</td>
  </tr>
  <tr>
    <td>and</td>
    <td>logical and</td>
  </tr>
  <tr>
    <td>xor</td>
    <td>logical xor</td>
  </tr>
  <tr>
    <td>or</td>
    <td>logical or</td>
  </tr>
  <tr>
    <td>not</td>
    <td>inverse condition. If value tested is not equal false, there is considered
      like true</td>
  </tr>
  <tr>
    <td>.</td>
    <td>joint 2 strings</td>
  </tr>
</tbody></table>
<p>Condition (=, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;) are compared to the false value. If not 0, 
  it's true</p>
<h2>Pointer<a name="pointer"></a></h2>
<p>If you want paste to variable of main programme à value, you must use 
  pointer. Exemple :</p>
<p>procedure maprocedure<br>
  if $argcount &gt; 0<br>
  set *arg[0] *arg[0] * 2<br>
  endif <br>
  end </p>
<p>maprocedure &amp;$mavariable<br>
  <br>
  WARNING : you can't have &amp;$$var or *$$var<br>
<h2>Function<a name="function"></a></h2>
<p>If you want create procedure, use function key word. Example :</p>
<p><b>function MyFunction</b><br>
  commande<br>
  <b>endfunc</b> </p>
<p>You can have parameter :</p>
<p><b>function MyFunction($arg1, $arg2)</b><br>
  or <br>
  <b>function MyFunction($arg1, $arg2)</b> </p>
<p>You can have optional parameters :</p>
<p><b>function MyFunction($arg1=1)</b><br>
  or<br>
  <b>function MyFunction($arg1=true)</b><br>
  or<br>
  <b>function MyFunction($fixed_parameter, $arg1=1) </b></p>
<p>You can have unlimited parameter :</p>
<p><b>function MyFunction(...)</b><br>
  or<br>
  <b>function MyFunction($arg1, ...)</b></p>
<p>Argument of procedure is in array <b>$args</b>. To know how many arguments 
  use <b>$argcount</b>.</p>
<p>To stop procedure, use <b>return</b> keyword with return value.</p>
<p>All function (user or buitin) can call with or without parenthese.</p>
<h2>Array<a name="array"></a></h2>
<p>You can use array (and mutlidimensionable array).<br>
  To initialize an array juste use $myarray[0] = "first value" or $myarray 
  = array("first value")<br>
  First position in array is 0.</p>
<h2>String<a name="string"></a></h2>
<p>To set string use " or ' delimiter</p>
<h2>Reserved words<a name="reservedword"></a></h2>
<p>in, or, xor, and, not, to, step, do, bitor, bitxor, bitand is reserved words.</p>
<h2> @ opérateur<a name="arobase"></a></h2>
<p>Use @ before command to don't to warning message</p>
<h1>Base functions</h1>
<h2>array<a name="array"></a></h2>
<p>array&nbsp;array("item1", "item2"...) : create an array</p>
<h2>arrayChunk<a name="arraychunk"></a></h2>
<p>array arrayChunk($array, int32 size). Split array to x array with size</p>
<h2>arrayExchange<a name="arrayexchange"></a></h2>
<p>arrayExchange($array, int32 index1, int32 index2). Exchange item of array.</p>
<h2>arrayFill<a name="arrayexfill"></a></h2>
<p>array arrayFill($array, value2). Fill an array</p>
<h2>arrayInsert<a name="arrayinsert"></a></h2>
<p>array arrayInsert($array, int32 Index, "value") insert a value in array. </p>
<h2>arrayMerge<a name="arraymerge"></a></h2>
<p>array arrayMerge($array, $array1, $array2, ...) Concat array </p>
<h2>arrayPop<a name="arraypop"></a></h2>
<p>string arrayPop($array). Return and delete last value of array.</p>
<h2>arrayPush<a name="arraypush"></a></h2>
<p>array arrayPush($array, "value1", "value2" ...) : add element at end of array</p><h2>arrayRev<a name="arrayrev"></a></h2>
<p>array arrayRev(array) : inverse order of array</p>
<h2>arrayRSort<a name="arrayrsort"></a></h2>
<p>array arraySort($array) Return sort array in inverse order.</p><h2>arraySearch<a name="arraysort"></a></h2>
<p>int arraySearch($array, "string to find", case_sensitive) Return 
  position in array else 0.</p>
<h2>arrayShift<a name="arraysort"></a></h2>
<p>string arraySearch($array) Return first item of array and delete this item of array.</p><h2>arrayShuffle<a name="arrayshuffle"></a></h2>
<p>string arrayShuffle($array) Return array order by random.</p><h2>arraySlice<a name="arrayslice"></a></h2>
<p>array arraySlice(array, int32 offset, [int32 length]) Returns the sequence of elements from the array array<br>If offest is non-negative value, start à begin of array, else at end.<br>If length not specified, return array until the end.<br></p><h2>arraySort<a name="arraysort"></a></h2>
<p>array arraySort($array) Return sort array.</p>
<h2>arraySplice<a name="arrayslice"></a></h2>
<p>array arraySplice(array, int offset, [int length, array replacement]) Returns the sequence of elements from the array array<br>
If offest is non-negative value, start à begin of array, else at end.<br>
If length not specified, return array until the end.<br>
All return value was delete at the array.<br />
If replacement is specified, replace each item who are delete by replacement.<br />
If replacement is not array, each item replace by replacement.</p>
<h2>call<a name="call"></a></h2>
<p>$resultfunction=call("name_of_command", arg1...) Call a function 
  with parameter. Use it for call dynamic function cause pointer of function does'nt 
  exists. Warning, function use directely function (isset, unset...) does'nt work.<br />
  </p>
<h2>chr<a name="chr"></a></h2>
<p>$var=chr(45) return char correspondent to number.</p>
<h2>count<a name="count"></a></h2>
<p>int count(array()) return number of element of array.</p>

<h2>define<a name="define"></a></h2>
<p>define("my_constante", "valeur") : set a constante.</p>

<h2>defined<a name="defined"></a></h2>
<p>defined("my_constante") : return true if constante is set.</p>

<h2>eval<a name="eval"></a></h2>
<p>$resultfunction=eval(<i>string or array</i>) execute commande or array of commande. 
  Return false if error occure, true else.</p>
<h2>extensionLoad<a name="extensionload"></a></h2>
<p>bool extensionload('extension') : load an extension. Under Windows, 
  extension is DLL file. Extension is filename without filepath and extension. 
  Return true if succes.</p>
<h2>extensionUnLoad<a name="extensionunload"></a></h2>
<p>extensionunload('extension') : unload extension.Extension automically unload 
  at end of script.</p>
<h2>functionDelete<a name="functionDelete"></a></h2>
<p>bool functionDelete("function1", "function2"). 
  Delete a function. Return true if succes else false.</p>
<h2>functionExists<a name="functionDelete"></a></h2>
<p>bool functionExists("function1"). Return true if function 
  exists (built-in or user) else false.</p>

<h2>functionRename<a name="functionDelete"></a></h2>
<p>bool functionExists("old name", "new name"). Rename 
  a function. Return true if succes else false.</p>
<h2>global<a name="global"></a></h2>
<p>global $var1, $var2... In function, paste global variable in function and at 
  end, paste variable in global variable.</p>
<h2>include/includeOnce<a name="isnumeric"></a></h2>
To include a file, use include function (warning, use / to separate directory 
even under windows).<br>
If you want include only once the file, use includeonce. <br>
File are include relatively to file who include. 
<h2>isArray<a name="isarray"></a></h2>
<p>bool isarray(<i>variable or value)</i>. return true if variable is array (flase 
  else). </p>
<h2>isExtensionLoaded<a name="isextensionloaded"></a></h2>bool isextensionloaded(<i>'extension')</i>. Return true if extension is 
loaded. 
<h2>isFloat<a name="isfloat"></a></h2>
<p>bool isfloat(<i>variable ou valeur</i>). return true if is float (flase else)</p>
<h2>isHexa<a name="ishexa"></a></h2>
<p>bool ishexa(<i>variable ou valeur</i>).Return true if string in hexa-number.</p>

<h2>isInteger<a name="isinteger"></a></h2>
<p>bool isinteger(<i>variable ou valeur</i>). return true if is integer (flase 
  else)</p>
<h2>isNumeric<a name="isnumeric"></a></h2>
<p>bool isnumeric(<i>variable ou valeur</i>). return true if is numeric (flase 
  else) </p>
<h2>isOctal<a name="isoctal"></a></h2>
<p>bool isOctal(<i>variable ou valeur</i>). return true if is octal (flase 
  else) </p>  
<h2>isString<a name="isstring"></a></h2>
<p>bool isString(<i>variable ou valeur</i>). return true if is string (flase else).</p>
<h2>length<a name="lenght"></a></h2>
<p>bool LENGHT($variable/string of char) : return lenght of string or variable</p>
<h2>ord<a name="ord"></a></h2>
<p>int chr("e")<br>
  or<br>
  int chr("etrer") Return ascii value of charactere.</p>
<p>&nbsp;</p>
</body></html>